/*
 * Parser.jjt
 *
 * A Java-- (MiniJava) parser.
 */

options {
	LOOKAHEAD=1;
	MULTI=true;
	VISITOR=true;
	JJTREE_OUTPUT_DIRECTORY = "AST";
}

PARSER_BEGIN(Parser)
package AST;

import AST.SimpleNode;

public class Parser {
	public Parser() {
	}

	private static void error_skipto(int kind) {
		// Generate the exception object
		ParseException e = generateParseException(); 
		// Print the error message
		System.out.println(e.toString()); 
		
		Token t;
		do {
			t = getNextToken();
		} while (t.kind != kind);
			// The above loop consumes tokens all the way up to a token of
			// "kind".  We use a do-while loop rather than a while because the
			// current token is the one immediately before the erroneous token
			// (in our case the token immediately before what should have been "while").
	}
}

PARSER_END(Parser)

/* 
 * Lexer token definitions
 */

/* Whitespace characters */
SKIP :
{
	" " | "\t" | "\n" | "\r" | "\f"
}

/* Comments */
SPECIAL_TOKEN : 
{
	< SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n") > |
	< MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/" > |
	< DOCS_COMMENT: "/**" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/" > 
}

/* General reserved keywords and characters */
TOKEN :
{
	< CLASS : "class" > |
	< EXTENDS : "extends" > |
	< PUBLIC : "public" > |
	< STATIC : "static" > |
	< VOID : "void" > |
	< MAIN : "main" > |
	< RETURN : "return" > |
	< IF : "if" > |
	< ELSE : "else" > |
	< WHILE : "while" > |
	< LENGTH : "length" > |
	< NEW : "new" > | 
	< TRUE : "true" > | 
	< FALSE : "false" > | 
	< THIS : "this" > | 
	< DOT : "." > |
	< COMMA: "," > |
	< NOT : "!" > |
	< SEMICOLON: ";" > |
	< LPARENS : "(" > |
	< RPARENS : ")" > |
	< LSQPARENS : "[" > |
	< RSQPARENS : "]" >  |
	< LBRACKET : "{" > |
	< RBRACKET : "}" > |
	< ASSIGN : "=" > 
}

/* Types */
TOKEN : {
	< TYPE_STRING : "String" > |
	< TYPE_BOOLEAN : "boolean" > | 
	< TYPE_INT : "int" >
}

/* Operators */
TOKEN : {
	< LESSTHAN : "<" > |
	< AND : "&&" > |
	< PLUS : "+" > |
	< MINUS : "-" > |
	< TIMES : "*" > |
	< DIVIDES : "/" > |
	< ARITHMETIC_OPERATOR : <PLUS> | <MINUS> | <TIMES> | <DIVIDES> >
}

/* Literals */
TOKEN : {
	< INTEGER_LITERAL : ["1"-"9"] (<DIGIT>)* | "0" > |
	< BOOLEAN_LITERAL : "true" | "false" >
}

/* Identifiers */
TOKEN :
{
	< IDENTIFIER : <LETTER> (<LETTER> | <DIGIT>)* > |
	< #DIGIT : [ "0"-"9" ] > | 
	< #LETTER: [ "a"-"z", "A"-"Z", "_" ] >
}

/*
 * Grammar definition
 */

SimpleNode Program() : {}
{
	ClassDecl() <EOF> { return jjtThis; }
}

void ClassDecl() #Class : {Token t;} 
{
	<CLASS> t=<IDENTIFIER> {jjtThis.val = t.image;} #Name ClassExtends()
	<LBRACKET>
		(VarDecl())*
		(<PUBLIC> (MainDecl() | MethodDecl()))*
	<RBRACKET>
}

void ClassExtends() #void : {Token t;}
{
	(
		<EXTENDS> t=<IDENTIFIER> {jjtThis.val = t.image;} #Extends
	)?
}

void MainDecl() #Main : {}
{
	<STATIC> <VOID> <MAIN>
	<LPARENS> <TYPE_STRING> <LSQPARENS> <RSQPARENS> <IDENTIFIER> <RPARENS> <LBRACKET>
		(LOOKAHEAD(2) VarDecl())*
		(Stmt())*
	<RBRACKET>
}

void MethodDecl() #Method : {Token t;}
{
	Type() #Return t=<IDENTIFIER> {jjtThis.val = t.image;} #Name
	<LPARENS> MethodParams() <RPARENS>
	<LBRACKET>
		(LOOKAHEAD(2) VarDecl())*
		(Stmt())*
		ReturnStmt()
	<RBRACKET>
}

void ReturnStmt() : {}
{
	<RETURN> (Expr())? <SEMICOLON>
}

void MethodParams() : {}
{
	(MethodParam() (<COMMA> MethodParam())*)?
}

void MethodParam() : {Token t;}
{
	Type() t=<IDENTIFIER> {jjtThis.val = t.image;}
}


void Type() : {Token t;} 
{
	LOOKAHEAD(2)
	t=<TYPE_INT> {jjtThis.val = t.image;} (<LSQPARENS> <RSQPARENS> {jjtThis.val += "[]";})?
	|
	t=<TYPE_BOOLEAN> {jjtThis.val = t.image;}
	|
	t=<IDENTIFIER> {jjtThis.val = t.image;}
}

void VarDecl() #Variable : {Token t;}
{
	Type() t=<IDENTIFIER> {jjtThis.val = t.image;} <SEMICOLON>
}

void Stmt() #void : {}
{
	Block()
	|
	LOOKAHEAD(2)
	AssignStmt()
	|
	LOOKAHEAD(2)
	ExprStmt()
	|
	IfStmt()
	|
	WhileStmt()
}

void Block() #void : {}
{
	<LBRACKET> (Stmt())* <RBRACKET>
}

void AssignStmt() #Assign : {Token t;}
{
	Lhs() <ASSIGN> Rhs() <SEMICOLON>
}

void Lhs() : {Token t;}
{
	t=<IDENTIFIER> {jjtThis.val = t.image;} (ArrayAcc())?
}

void Rhs() : {Token t;}
{
	Expr()
}

void ArrayAcc() #void : {}
{
	<LSQPARENS> Expr() <RSQPARENS>
} 

void ExprStmt() #void : {}
{
	Expr() <SEMICOLON>
}

void IfStmt() #If : {}
{
	<IF> <LPARENS> Expr() #IfCondition <RPARENS> Stmt() <ELSE> Stmt() #Else
}

void WhileStmt() #While : {}
{
	<WHILE> <LPARENS>
	try {
		Expr() #WhileCondition 
	} catch (ParseException e) {
		error_skipto(LBRACKET);
	}
	<RPARENS> Stmt()
}

void Expr() #void : {}
{
	ExprAnd()
}

void ExprAnd() #void : {}
{
	ExprRelation()
	(
		<AND> ExprRelation() #And(2)
	)*
}

void ExprRelation() #void : {Token t;}
{
	ExprAddSub() 
	(
		<LESSTHAN> ExprAddSub() #LessThan(2)
	)*
}

void ExprAddSub() #void : {}
{
	ExprMulDiv() 
	(
		<PLUS> ExprMulDiv() #Add(2)
		|
		<MINUS> ExprMulDiv() #Sub(2)
	)*
}

void ExprMulDiv() #void : {}
{
	ExprUnary()
	(
		<TIMES> ExprUnary() #Mul(2)
		|
		<DIVIDES> ExprUnary() #Div(2)
	)*
}

void ExprUnary() #void : {}
{
	(<NOT>)*
	ExprSuffix()
}

void ExprSuffix() #ExprSuffix(> 1) : {Token t;}
{
	ExprPrefix()
	(
		ArrayAcc() {jjtThis.kind = "ArrayAccess";}
		|
		jjtThis.val=MethodCall() {jjtThis.kind = "MethodCall";}
	)*
}

String MethodCall() #void : {String token_img; Token t;}
{
	<DOT> 
	(
	t=<LENGTH> {token_img =t.image;}
	|
	t=<IDENTIFIER> {token_img = t.image;} 
	<LPARENS> MethodCallArgs() <RPARENS>
	)
	{return token_img;}
}

void MethodCallArgs() : {} 
{
	(Expr() (<COMMA> Expr())* )?
}

void ExprPrefix() #void : {Token t;}
{
	t=<INTEGER_LITERAL> {jjtThis.val = t.image;} #Integer
	|
	t=<TRUE> {jjtThis.val = t.image;} #True
	| 
	t=<FALSE> {jjtThis.val = t.image;} #False
	| 
	t=<IDENTIFIER> {jjtThis.val = t.image;} #Id
	| 
	t=<THIS> {jjtThis.val = t.image;} #This
	|
	<LPARENS> Expr() <RPARENS> 
	|
	LOOKAHEAD(2)
	<NEW> (
		t=<TYPE_INT> {jjtThis.val = t.image + "[]";} #New <LSQPARENS> (Expr())? <RSQPARENS> 
		|
		t=<IDENTIFIER> {jjtThis.val = t.image;} #New <LPARENS> <RPARENS>
	)
}
