/* Parser.jj : A Java-- parser. */

options {
  LOOKAHEAD=1;
}

PARSER_BEGIN(Parser)
  import java.io.InputStream;

  public class Parser {
    public static void main(String args[]) throws ParseException, IOException {
      Parser parser;

      InputStream parserStream = (args.length == 0) ? System.in : readInputFile(args[0]);
      parser = new Parser(parserStream);

      parser.Program();
    }

    public static InputStream readInputFile(String inputFile) 
      throws IOException {
        File initialFile = new File(inputFile);
        InputStream targetStream = new FileInputStream(initialFile);
        return targetStream;
      }
  }
PARSER_END(Parser)

SKIP :
{
  " " | "\t" | "\r" 
}

TOKEN :
{
  < CLASS : "class" >
  |
  < EXTENDS : "extends" >
  |
  < PUBLIC : "public" >
  |
  < STATIC : "static" >
  |
  < VOID : "void" >
  |
  < MAIN : "main" >
  |
  < STRING : "String" >
  |
  < RETURN : "return" >
  |
  < IF : "if" >
  |
  < ELSE : "else" >
  |
  < WHILE : "while" >
  |
  < LENGTH : "length" >
  |
  < NEW : "new" >
  | 
  < TRUE : "true" >
  | 
  < FALSE : "false" >
  | 
  < THIS : "this" >
  | 
  < TYPE : "int" ("[" "]")? | "boolean" | <IDENTIFIER> >
  |
  < IDENTIFIER : (["a"-"z"] | ["A"-"Z"] | "_")(["a"-"z"] | ["A"-"Z"] | ["0"-"9"] | "_")* > 
  |
  < INTEGER_LITERAL : <DIGITS> >
  |
  < BOOLEAN_LITERAL : "true" | "false" >
  |
  < #DIGITS : (["0"-"9"])+ >
}

void Program() : {}
{
  ClassDeclaration() <EOF>
}

void ClassDeclaration() : {} 
{
  <CLASS> <IDENTIFIER> (<EXTENDS> <IDENTIFIER>)? "{" 
    (VarDeclaration())*
    (
    LOOKAHEAD(2) 
    MainDeclaration() 
    | 
    MethodDeclaration()
    )*
  "}"
}

void VarDeclaration() : {}
{
  <TYPE> <IDENTIFIER> ";"
}

void MainDeclaration() : {}
{
  <PUBLIC> <STATIC> <VOID> <MAIN>
  "(" <STRING> "[" "]" <IDENTIFIER> ")" "{"
    (VarDeclaration())*
    (Statement())*
  "}"
}

void MethodDeclaration() : {}
{
  <PUBLIC> <TYPE> <IDENTIFIER> 
  "(" (<TYPE> <IDENTIFIER> "," (<TYPE> <IDENTIFIER>)*)? ")"
  "{"
    (VarDeclaration())*
    (Statement())*
    <RETURN> Expression() ";"
  "}"
}

void Statement() : {}
{
  "{" (Statement())* "}"
  |
  <IF> "(" Expression() ")" Statement() <ELSE> Statement()
  |
  <WHILE> "(" Expression() ")" Statement()
  |
  Expression() ";"
  |
  <IDENTIFIER> (
    "=" Expression() ";"
    |
    "[" Expression() "]" "=" Expression() ";"
  )
}

void Expression() : {}
{
  SimpleExpression() (
    ("&&" | "<" | "+" | "-" | "*" | "/") SimpleExpression()
    |
    "[" SimpleExpression() "]"
    |
    "." (
      <LENGTH>
      |
      <IDENTIFIER> "(" (SimpleExpression() ("," SimpleExpression())*)? ")"
    )
  )*
}

void SimpleExpression() : {}
{
  <TRUE> 
  | 
  <FALSE>
  |
  <THIS>
  |
  <INTEGER_LITERAL> 
  |
  <IDENTIFIER> 
  |
  <NEW> (
    "int" "[" Expression() "]"
    |
    <IDENTIFIER> "(" ")"
  )
  |
  "!" Expression()
  |
  "(" Expression() ")"
}
