/* Parser.jj : A Java-- parser. */

options {

}

PARSER_BEGIN(Parser)
  import java.io.*;
  import java.io.InputStream;

  public class Parser {
    public static void main(String args[]) throws ParseException, IOException {
      Parser parser;

      switch(args.length) {
        case 0:
          parser = new Parser(System.in);
          break;
        case 1:
          parser = new Parser(readInputFile(args[0]));
          break;
        default:
          return;
      }

      parser.Aritm();
    }

    public static InputStream readInputFile(String inputFile) 
      throws IOException {
        File initialFile = new File(inputFile);
        InputStream targetStream = new FileInputStream(initialFile);
        return targetStream;
      }
  }

PARSER_END(Parser)

SKIP :
{
  " " | "\t" | "\r" 
}

TOKEN :
{
  < TYPE: "int" "[" "]" | "boolean" | "int" | <IDENTIFIER> >
  |
  < TRUE: "true" >
  |
  < FALSE: "false" >
  | 
  < THIS: "this" >
  | 
  < IDENTIFIER : (["A"-"z"]) > 
  |
  < INTEGER_LITERAL : <DIGITS> >
  |
  < #DIGITS : (["0"-"9"])+ >
  |
  < EOL : "\n" | "\r" | "\r\n" >
}

void Program() : {}
{
  ClassDeclaration() <EOF>
}

void ClassDeclaration() : {} 
{
  "class" <IDENTIFIER> ("extends" <IDENTIFIER>)? "{" 
    (VarDeclaration())*
    (MainDeclaration() | MethodDeclaration())*
  "}"
}

void VarDeclaration() : {}
{
  <TYPE> <IDENTIFIER> ";"
}

void MainDeclaration() : {}
{
  "public" "static" "void" "main" 
  "(" "String" "[" "]" <IDENTIFIER> ")" "{"
    (VarDeclaration())*
    (Statement())*
  "}"
}

void MethodDeclaration() : {}
{
  "public" <TYPE> <IDENTIFIER> 
  "(" (<TYPE> <IDENTIFIER> "," (<TYPE> <IDENTIFIER>)*)? ")"
  "{"
    (VarDeclaration())*
    (Statement())*
    "return" Expression() ";"
  "}"
}

void Statement() : {}
{
   "{" (Statement())* "}"
  |
   "if" "(" Expression() ")" Statement() "else" Statement()
  |
   "while" "(" Expression() ")" Statement()
  |
   Expression() ";"
  |
  <IDENTIFIER> (
    "=" Expression() ";"
    |
    "[" Expression() "]" "=" Expression() ";"
  )
}

void Expression() : {}
{
  SimpleExpression() (
    ("&&" | "<" | "+" | "-" | "*" | "/") SimpleExpression()
    |
    "[" SimpleExpression() "]"
    |
    "." (
      "length"
      |
      <IDENTIFIER> "(" (SimpleExpression() ("," SimpleExpression())*)? ")"
    )
  )*
}

void SimpleExpression() : {}
{
  <TRUE> | <FALSE>
  |
  <THIS>
  |
  <INTEGER_LITERAL> 
  |
  <IDENTIFIER> 
  |
  "new" (
    "int" "[" Expression() "]"
    |
    <IDENTIFIER> "(" ")"
  )
  |
   "!" Expression()
  |
   "(" Expression() ")"
}
