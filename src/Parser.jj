/* Parser.jj : A Java-- parser. */

options {

}

PARSER_BEGIN(Parser)
  import java.io.*;
  import java.io.InputStream;

  public class Parser {
    public static void main(String args[]) throws ParseException, IOException {
      Parser parser;

      switch(args.length) {
        case 0:
          parser = new Parser(System.in);
          break;
        case 1:
          parser = new Parser(readInputFile(args[0]));
          break;
        default:
          return;
      }

      parser.Aritm();
    }

    public static InputStream readInputFile(String inputFile) 
      throws IOException {
        File initialFile = new File(inputFile);
        InputStream targetStream = new FileInputStream(initialFile);
        return targetStream;
      }
  }

PARSER_END(Parser)

SKIP :
{
  " " | "\t" | "\r" 
}

TOKEN :
{
  < TYPE: "int" "[" "]" | "boolean" | "int" | <IDENTIFIER> >
  | 
  < IDENTIFIER : (["A"-"z"]) > 
  |
  < INTEGER_LITERAL : <DIGITS> >
  |
  < #DIGITS : (["0"-"9"])+ >
  |
  < EOL : "\n" | "\r" | "\r\n" >
}

void Program() : {}
{
  ClassDeclaration() <EOF>
}

void ClassDeclaration() : {} 
{
  "class" <IDENTIFIER> ("extends" <IDENTIFIER>)? "{" 
    (VarDeclaration())*
    (MainDeclaration() | MethodDeclaration())*
  "}"
}

void VarDeclaration() : {}
{
  <TYPE> <IDENTIFIER> ";"
}

void MainDeclaration() : {}
{
  "public" "static" "void" "main" 
  "(" "String" "[" "]" <IDENTIFIER> ")" "{"
    (VarDeclaration())*
    (Statement())*
  "}"
}

void MethodDeclaration() : {}
{
  "public" <TYPE> <IDENTIFIER> 
  "(" (<TYPE> <IDENTIFIER> "," (<TYPE> <IDENTIFIER>)*)? ")"
  "{"
    (VarDeclaration())*
    (Statement())*
    "return" Expression() ";"
  "}"
}

void Statement() : {}
{
  (
   "{" (Statement())* "}"
  ) 
  |
  (
   "if" "(" Expression() ")" Statement() "else" Statement()
  ) 
  |
  (
   "while" "(" Expression() ")" Statement()
  ) 
  |
  (
   Expression() ";"
  ) 
  |
  (
   <IDENTIFIER> "=" Expression() ";"
  ) 
  |
  (
   <IDENTIFIER> "[" Expression() "]" "=" Expression() ";"
  )
}

void Expression() : {}
{
  (
   Expression() ("&&" | "<" | "+" | "-" | "*" | "/") Expression()
  ) 
  |
  (
   Expression() "[" Expression() "]"
  ) 
  |
  (
   Expression() "." "length"
  ) 
  |
  (
   Expression() "." <IDENTIFIER> "(" (Expression() ("," Expression())*)? ")"
  ) 
  |
  <INTEGER_LITERAL> 
  |
  <IDENTIFIER> 
  |
  "true" 
  | 
  "false" 
  |
  "this" 
  |
  (
   "new" "int" "[" Expression() "]"
  ) 
  |
  (
   "new" <IDENTIFIER> "(" ")"
  ) 
  |
  (
   "!" Expression()
  ) 
  |
  (
   "(" Expression() ")"
  )
}
