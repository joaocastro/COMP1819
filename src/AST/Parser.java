/* Parser.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. Parser.java */
package AST;

import AST.SimpleNode;

public class Parser/*@bgen(jjtree)*/implements ParserTreeConstants, ParserConstants {/*@bgen(jjtree)*/
  protected static JJTParserState jjtree = new JJTParserState();public Parser() {
        }

        private static void error_skipto(int kind) {
                // Generate the exception object
                ParseException e = generateParseException();
                // Print the error message
                System.out.println(e.toString());

                Token t;
                do {
                        t = getNextToken();
                } while (t.kind != kind);
                        // The above loop consumes tokens all the way up to a token of
                        // "kind".  We use a do-while loop rather than a while because the
                        // current token is the one immediately before the erroneous token
                        // (in our case the token immediately before what should have been "while").
        }

/*
 * Grammar definition
 */
  static final public 
SimpleNode Program() throws ParseException {/*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ClassDecl();
      jj_consume_token(0);
jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void ClassDecl() throws ParseException {/*@bgen(jjtree) Class */
                           ASTClass jjtn000 = new ASTClass(JJTCLASS);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(CLASS);
      t = jj_consume_token(IDENTIFIER);
ASTName jjtn001 = new ASTName(JJTNAME);
                                 boolean jjtc001 = true;
                                 jjtree.openNodeScope(jjtn001);
      try {
jjtree.closeNodeScope(jjtn001, true);
                                 jjtc001 = false;
jjtn001.val = t.image;
      } finally {
if (jjtc001) {
                                   jjtree.closeNodeScope(jjtn001, true);
                                 }
      }
      ClassExtends();
      jj_consume_token(LBRACKET);
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case TYPE_BOOLEAN:
        case TYPE_INT:
        case IDENTIFIER:{
          ;
          break;
          }
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        VarDecl();
      }
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PUBLIC:{
          ;
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          break label_2;
        }
        jj_consume_token(PUBLIC);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case STATIC:{
          MainDecl();
          break;
          }
        case TYPE_BOOLEAN:
        case TYPE_INT:
        case IDENTIFIER:{
          MethodDecl();
          break;
          }
        default:
          jj_la1[2] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(RBRACKET);
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void ClassExtends() throws ParseException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EXTENDS:{
      jj_consume_token(EXTENDS);
      t = jj_consume_token(IDENTIFIER);
ASTExtends jjtn001 = new ASTExtends(JJTEXTENDS);
                                           boolean jjtc001 = true;
                                           jjtree.openNodeScope(jjtn001);
      try {
jjtree.closeNodeScope(jjtn001, true);
                                           jjtc001 = false;
jjtn001.val = t.image;
      } finally {
if (jjtc001) {
                                             jjtree.closeNodeScope(jjtn001, true);
                                           }
      }
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      ;
    }
  }

  static final public void MainDecl() throws ParseException {/*@bgen(jjtree) Main */
  ASTMain jjtn000 = new ASTMain(JJTMAIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(STATIC);
      jj_consume_token(VOID);
      jj_consume_token(MAIN);
      jj_consume_token(LPARENS);
      jj_consume_token(TYPE_STRING);
      jj_consume_token(LSQPARENS);
      jj_consume_token(RSQPARENS);
      jj_consume_token(IDENTIFIER);
      jj_consume_token(RPARENS);
      jj_consume_token(LBRACKET);
      label_3:
      while (true) {
        if (jj_2_1(2)) {
          ;
        } else {
          break label_3;
        }
        VarDecl();
      }
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IF:
        case WHILE:
        case NEW:
        case TRUE:
        case FALSE:
        case THIS:
        case NOT:
        case LPARENS:
        case LBRACKET:
        case INTEGER_LITERAL:
        case IDENTIFIER:{
          ;
          break;
          }
        default:
          jj_la1[4] = jj_gen;
          break label_4;
        }
        Stmt();
      }
      jj_consume_token(RBRACKET);
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void MethodDecl() throws ParseException {/*@bgen(jjtree) Method */
                             ASTMethod jjtn000 = new ASTMethod(JJTMETHOD);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);Token t;
    try {
ASTReturn jjtn001 = new ASTReturn(JJTRETURN);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
      try {
        Type();
      } catch (Throwable jjte001) {
if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
      }
      t = jj_consume_token(IDENTIFIER);
ASTName jjtn002 = new ASTName(JJTNAME);
                                        boolean jjtc002 = true;
                                        jjtree.openNodeScope(jjtn002);
      try {
jjtree.closeNodeScope(jjtn002, true);
                                        jjtc002 = false;
jjtn002.val = t.image;
      } finally {
if (jjtc002) {
                                          jjtree.closeNodeScope(jjtn002, true);
                                        }
      }
      jj_consume_token(LPARENS);
      Params();
      jj_consume_token(RPARENS);
      jj_consume_token(LBRACKET);
      label_5:
      while (true) {
        if (jj_2_2(2)) {
          ;
        } else {
          break label_5;
        }
        VarDecl();
      }
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IF:
        case WHILE:
        case NEW:
        case TRUE:
        case FALSE:
        case THIS:
        case NOT:
        case LPARENS:
        case LBRACKET:
        case INTEGER_LITERAL:
        case IDENTIFIER:{
          ;
          break;
          }
        default:
          jj_la1[5] = jj_gen;
          break label_6;
        }
        Stmt();
      }
      jj_consume_token(RETURN);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NEW:
      case TRUE:
      case FALSE:
      case THIS:
      case NOT:
      case LPARENS:
      case INTEGER_LITERAL:
      case IDENTIFIER:{
        Expr();
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
      jj_consume_token(RBRACKET);
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Params() throws ParseException {/*@bgen(jjtree) Params */
  ASTParams jjtn000 = new ASTParams(JJTPARAMS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TYPE_BOOLEAN:
      case TYPE_INT:
      case IDENTIFIER:{
        Param();
        label_7:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[7] = jj_gen;
            break label_7;
          }
          jj_consume_token(COMMA);
          Param();
        }
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Param() throws ParseException {/*@bgen(jjtree) Param */
                ASTParam jjtn000 = new ASTParam(JJTPARAM);
                boolean jjtc000 = true;
                jjtree.openNodeScope(jjtn000);Token t;
    try {
      Type();
      t = jj_consume_token(IDENTIFIER);
jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
jjtn000.val = t.image;
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Type() throws ParseException {/*@bgen(jjtree) Type */
               ASTType jjtn000 = new ASTType(JJTTYPE);
               boolean jjtc000 = true;
               jjtree.openNodeScope(jjtn000);Token t;
    try {
      if (jj_2_3(2)) {
        t = jj_consume_token(TYPE_INT);
jjtn000.val = t.image;
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LSQPARENS:{
          jj_consume_token(LSQPARENS);
          jj_consume_token(RSQPARENS);
jjtn000.val += "[]";
          break;
          }
        default:
          jj_la1[9] = jj_gen;
          ;
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case TYPE_BOOLEAN:{
          t = jj_consume_token(TYPE_BOOLEAN);
jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
jjtn000.val = t.image;
          break;
          }
        case IDENTIFIER:{
          t = jj_consume_token(IDENTIFIER);
jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
jjtn000.val = t.image;
          break;
          }
        default:
          jj_la1[10] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void VarDecl() throws ParseException {/*@bgen(jjtree) Variable */
                            ASTVariable jjtn000 = new ASTVariable(JJTVARIABLE);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);Token t;
    try {
      Type();
      t = jj_consume_token(IDENTIFIER);
jjtn000.val = t.image;
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Stmt() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LBRACKET:{
      Block();
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      if (jj_2_4(2)) {
        AssignStmt();
      } else if (jj_2_5(2)) {
        ExprStmt();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IF:{
          IfStmt();
          break;
          }
        case WHILE:{
          WhileStmt();
          break;
          }
        default:
          jj_la1[12] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  static final public void Block() throws ParseException {
    jj_consume_token(LBRACKET);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IF:
      case WHILE:
      case NEW:
      case TRUE:
      case FALSE:
      case THIS:
      case NOT:
      case LPARENS:
      case LBRACKET:
      case INTEGER_LITERAL:
      case IDENTIFIER:{
        ;
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        break label_8;
      }
      Stmt();
    }
    jj_consume_token(RBRACKET);
  }

  static final public void AssignStmt() throws ParseException {/*@bgen(jjtree) Assign */
                             ASTAssign jjtn000 = new ASTAssign(JJTASSIGN);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);Token t;
    try {
      Lhs();
      jj_consume_token(ASSIGN);
      Rhs();
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Lhs() throws ParseException {/*@bgen(jjtree) Lhs */
              ASTLhs jjtn000 = new ASTLhs(JJTLHS);
              boolean jjtc000 = true;
              jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
jjtn000.val = t.image;
      ArrayAcc();
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Rhs() throws ParseException {/*@bgen(jjtree) Rhs */
              ASTRhs jjtn000 = new ASTRhs(JJTRHS);
              boolean jjtc000 = true;
              jjtree.openNodeScope(jjtn000);Token t;
    try {
      Expr();
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void ArrayAcc() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LSQPARENS:{
      jj_consume_token(LSQPARENS);
      Expr();
      jj_consume_token(RSQPARENS);
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      ;
    }
  }

  static final public void ExprStmt() throws ParseException {/*@bgen(jjtree) ExprStmt */
  ASTExprStmt jjtn000 = new ASTExprStmt(JJTEXPRSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Expr();
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void IfStmt() throws ParseException {/*@bgen(jjtree) If */
  ASTIf jjtn000 = new ASTIf(JJTIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IF);
      jj_consume_token(LPARENS);
ASTIfCondition jjtn001 = new ASTIfCondition(JJTIFCONDITION);
                         boolean jjtc001 = true;
                         jjtree.openNodeScope(jjtn001);
      try {
        Expr();
      } catch (Throwable jjte001) {
if (jjtc001) {
                           jjtree.clearNodeScope(jjtn001);
                           jjtc001 = false;
                         } else {
                           jjtree.popNode();
                         }
                         if (jjte001 instanceof RuntimeException) {
                           {if (true) throw (RuntimeException)jjte001;}
                         }
                         if (jjte001 instanceof ParseException) {
                           {if (true) throw (ParseException)jjte001;}
                         }
                         {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                           jjtree.closeNodeScope(jjtn001, true);
                         }
      }
      jj_consume_token(RPARENS);
      Stmt();
      jj_consume_token(ELSE);
ASTElse jjtn002 = new ASTElse(JJTELSE);
                                                                     boolean jjtc002 = true;
                                                                     jjtree.openNodeScope(jjtn002);
      try {
        Stmt();
      } catch (Throwable jjte002) {
if (jjtc002) {
                                                                       jjtree.clearNodeScope(jjtn002);
                                                                       jjtc002 = false;
                                                                     } else {
                                                                       jjtree.popNode();
                                                                     }
                                                                     if (jjte002 instanceof RuntimeException) {
                                                                       {if (true) throw (RuntimeException)jjte002;}
                                                                     }
                                                                     if (jjte002 instanceof ParseException) {
                                                                       {if (true) throw (ParseException)jjte002;}
                                                                     }
                                                                     {if (true) throw (Error)jjte002;}
      } finally {
if (jjtc002) {
                                                                       jjtree.closeNodeScope(jjtn002, true);
                                                                     }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void WhileStmt() throws ParseException {/*@bgen(jjtree) While */
  ASTWhile jjtn000 = new ASTWhile(JJTWHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(WHILE);
      jj_consume_token(LPARENS);
      try {
ASTWhileCondition jjtn001 = new ASTWhileCondition(JJTWHILECONDITION);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
        try {
          Expr();
        } catch (Throwable jjte001) {
if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte001;}
                  }
                  if (jjte001 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte001;}
                  }
                  {if (true) throw (Error)jjte001;}
        } finally {
if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, true);
                  }
        }
      } catch (ParseException e) {
error_skipto(LBRACKET);
      }
      jj_consume_token(RPARENS);
      Stmt();
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Expr() throws ParseException {
    ExprAnd();
  }

  static final public void ExprAnd() throws ParseException {
    ExprRelation();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AND:{
        ;
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        break label_9;
      }
      jj_consume_token(AND);
ASTAnd jjtn001 = new ASTAnd(JJTAND);
                        boolean jjtc001 = true;
                        jjtree.openNodeScope(jjtn001);
      try {
        ExprRelation();
      } catch (Throwable jjte001) {
if (jjtc001) {
                          jjtree.clearNodeScope(jjtn001);
                          jjtc001 = false;
                        } else {
                          jjtree.popNode();
                        }
                        if (jjte001 instanceof RuntimeException) {
                          {if (true) throw (RuntimeException)jjte001;}
                        }
                        if (jjte001 instanceof ParseException) {
                          {if (true) throw (ParseException)jjte001;}
                        }
                        {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                          jjtree.closeNodeScope(jjtn001,  2);
                        }
      }
    }
  }

  static final public void ExprRelation() throws ParseException {Token t;
    ExprAddSub();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LESSTHAN:{
        ;
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        break label_10;
      }
      jj_consume_token(LESSTHAN);
ASTLessThan jjtn001 = new ASTLessThan(JJTLESSTHAN);
                             boolean jjtc001 = true;
                             jjtree.openNodeScope(jjtn001);
      try {
        ExprAddSub();
      } catch (Throwable jjte001) {
if (jjtc001) {
                               jjtree.clearNodeScope(jjtn001);
                               jjtc001 = false;
                             } else {
                               jjtree.popNode();
                             }
                             if (jjte001 instanceof RuntimeException) {
                               {if (true) throw (RuntimeException)jjte001;}
                             }
                             if (jjte001 instanceof ParseException) {
                               {if (true) throw (ParseException)jjte001;}
                             }
                             {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                               jjtree.closeNodeScope(jjtn001,  2);
                             }
      }
    }
  }

  static final public void ExprAddSub() throws ParseException {
    ExprMulDiv();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:
      case MINUS:{
        ;
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        break label_11;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:{
        jj_consume_token(PLUS);
ASTAdd jjtn001 = new ASTAdd(JJTADD);
                         boolean jjtc001 = true;
                         jjtree.openNodeScope(jjtn001);
        try {
          ExprMulDiv();
        } catch (Throwable jjte001) {
if (jjtc001) {
                           jjtree.clearNodeScope(jjtn001);
                           jjtc001 = false;
                         } else {
                           jjtree.popNode();
                         }
                         if (jjte001 instanceof RuntimeException) {
                           {if (true) throw (RuntimeException)jjte001;}
                         }
                         if (jjte001 instanceof ParseException) {
                           {if (true) throw (ParseException)jjte001;}
                         }
                         {if (true) throw (Error)jjte001;}
        } finally {
if (jjtc001) {
                           jjtree.closeNodeScope(jjtn001,  2);
                         }
        }
        break;
        }
      case MINUS:{
        jj_consume_token(MINUS);
ASTSub jjtn002 = new ASTSub(JJTSUB);
                          boolean jjtc002 = true;
                          jjtree.openNodeScope(jjtn002);
        try {
          ExprMulDiv();
        } catch (Throwable jjte002) {
if (jjtc002) {
                            jjtree.clearNodeScope(jjtn002);
                            jjtc002 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte002 instanceof RuntimeException) {
                            {if (true) throw (RuntimeException)jjte002;}
                          }
                          if (jjte002 instanceof ParseException) {
                            {if (true) throw (ParseException)jjte002;}
                          }
                          {if (true) throw (Error)jjte002;}
        } finally {
if (jjtc002) {
                            jjtree.closeNodeScope(jjtn002,  2);
                          }
        }
        break;
        }
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void ExprMulDiv() throws ParseException {
    ExprUnary();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TIMES:
      case DIVIDES:{
        ;
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        break label_12;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TIMES:{
        jj_consume_token(TIMES);
ASTMul jjtn001 = new ASTMul(JJTMUL);
                          boolean jjtc001 = true;
                          jjtree.openNodeScope(jjtn001);
        try {
          ExprUnary();
        } catch (Throwable jjte001) {
if (jjtc001) {
                            jjtree.clearNodeScope(jjtn001);
                            jjtc001 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte001 instanceof RuntimeException) {
                            {if (true) throw (RuntimeException)jjte001;}
                          }
                          if (jjte001 instanceof ParseException) {
                            {if (true) throw (ParseException)jjte001;}
                          }
                          {if (true) throw (Error)jjte001;}
        } finally {
if (jjtc001) {
                            jjtree.closeNodeScope(jjtn001,  2);
                          }
        }
        break;
        }
      case DIVIDES:{
        jj_consume_token(DIVIDES);
ASTDiv jjtn002 = new ASTDiv(JJTDIV);
                            boolean jjtc002 = true;
                            jjtree.openNodeScope(jjtn002);
        try {
          ExprUnary();
        } catch (Throwable jjte002) {
if (jjtc002) {
                              jjtree.clearNodeScope(jjtn002);
                              jjtc002 = false;
                            } else {
                              jjtree.popNode();
                            }
                            if (jjte002 instanceof RuntimeException) {
                              {if (true) throw (RuntimeException)jjte002;}
                            }
                            if (jjte002 instanceof ParseException) {
                              {if (true) throw (ParseException)jjte002;}
                            }
                            {if (true) throw (Error)jjte002;}
        } finally {
if (jjtc002) {
                              jjtree.closeNodeScope(jjtn002,  2);
                            }
        }
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void ExprUnary() throws ParseException {
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NOT:{
        ;
        break;
        }
      default:
        jj_la1[21] = jj_gen;
        break label_13;
      }
      jj_consume_token(NOT);
    }
    ExprSuffix();
  }

  static final public void ExprSuffix() throws ParseException {Token t;
    ExprPrefix();
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DOT:
      case LSQPARENS:{
        ;
        break;
        }
      default:
        jj_la1[22] = jj_gen;
        break label_14;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LSQPARENS:{
        jj_consume_token(LSQPARENS);
        Expr();
        jj_consume_token(RSQPARENS);
        break;
        }
      case DOT:{
        MethodCall();
        break;
        }
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void MethodCall() throws ParseException {/*@bgen(jjtree) MethodCall */
                     ASTMethodCall jjtn000 = new ASTMethodCall(JJTMETHODCALL);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(DOT);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LENGTH:{
        t = jj_consume_token(LENGTH);
jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
jjtn000.val = t.image;
        break;
        }
      case IDENTIFIER:{
        t = jj_consume_token(IDENTIFIER);
jjtn000.val = t.image;
        jj_consume_token(LPARENS);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NEW:
        case TRUE:
        case FALSE:
        case THIS:
        case NOT:
        case LPARENS:
        case INTEGER_LITERAL:
        case IDENTIFIER:{
          Expr();
          label_15:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case COMMA:{
              ;
              break;
              }
            default:
              jj_la1[24] = jj_gen;
              break label_15;
            }
            jj_consume_token(COMMA);
            Expr();
          }
          break;
          }
        default:
          jj_la1[25] = jj_gen;
          ;
        }
        jj_consume_token(RPARENS);
        break;
        }
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void ExprPrefix() throws ParseException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTEGER_LITERAL:{
      t = jj_consume_token(INTEGER_LITERAL);
ASTInteger jjtn001 = new ASTInteger(JJTINTEGER);
                              boolean jjtc001 = true;
                              jjtree.openNodeScope(jjtn001);
      try {
jjtree.closeNodeScope(jjtn001, true);
                              jjtc001 = false;
jjtn001.val = t.image;
      } finally {
if (jjtc001) {
                                jjtree.closeNodeScope(jjtn001, true);
                              }
      }
      break;
      }
    case TRUE:{
      t = jj_consume_token(TRUE);
ASTTrue jjtn002 = new ASTTrue(JJTTRUE);
                   boolean jjtc002 = true;
                   jjtree.openNodeScope(jjtn002);
      try {
jjtree.closeNodeScope(jjtn002, true);
                   jjtc002 = false;
jjtn002.val = t.image;
      } finally {
if (jjtc002) {
                     jjtree.closeNodeScope(jjtn002, true);
                   }
      }
      break;
      }
    case FALSE:{
      t = jj_consume_token(FALSE);
ASTFalse jjtn003 = new ASTFalse(JJTFALSE);
                    boolean jjtc003 = true;
                    jjtree.openNodeScope(jjtn003);
      try {
jjtree.closeNodeScope(jjtn003, true);
                    jjtc003 = false;
jjtn003.val = t.image;
      } finally {
if (jjtc003) {
                      jjtree.closeNodeScope(jjtn003, true);
                    }
      }
      break;
      }
    case IDENTIFIER:{
      t = jj_consume_token(IDENTIFIER);
ASTId jjtn004 = new ASTId(JJTID);
                         boolean jjtc004 = true;
                         jjtree.openNodeScope(jjtn004);
      try {
jjtree.closeNodeScope(jjtn004, true);
                         jjtc004 = false;
jjtn004.val = t.image;
      } finally {
if (jjtc004) {
                           jjtree.closeNodeScope(jjtn004, true);
                         }
      }
      break;
      }
    case THIS:{
      t = jj_consume_token(THIS);
ASTThis jjtn005 = new ASTThis(JJTTHIS);
                   boolean jjtc005 = true;
                   jjtree.openNodeScope(jjtn005);
      try {
jjtree.closeNodeScope(jjtn005, true);
                   jjtc005 = false;
jjtn005.val = t.image;
      } finally {
if (jjtc005) {
                     jjtree.closeNodeScope(jjtn005, true);
                   }
      }
      break;
      }
    case LPARENS:{
      jj_consume_token(LPARENS);
      Expr();
      jj_consume_token(RPARENS);
      break;
      }
    default:
      jj_la1[29] = jj_gen;
      if (jj_2_6(2)) {
        jj_consume_token(NEW);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case TYPE_INT:{
          t = jj_consume_token(TYPE_INT);
ASTNew jjtn006 = new ASTNew(JJTNEW);
                               boolean jjtc006 = true;
                               jjtree.openNodeScope(jjtn006);
          try {
jjtree.closeNodeScope(jjtn006, true);
                               jjtc006 = false;
jjtn006.val = t.image;
          } finally {
if (jjtc006) {
                                 jjtree.closeNodeScope(jjtn006, true);
                               }
          }
          jj_consume_token(LSQPARENS);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case NEW:
          case TRUE:
          case FALSE:
          case THIS:
          case NOT:
          case LPARENS:
          case INTEGER_LITERAL:
          case IDENTIFIER:{
            Expr();
            break;
            }
          default:
            jj_la1[27] = jj_gen;
            ;
          }
          jj_consume_token(RSQPARENS);
          break;
          }
        case IDENTIFIER:{
          t = jj_consume_token(IDENTIFIER);
ASTNew jjtn007 = new ASTNew(JJTNEW);
                                 boolean jjtc007 = true;
                                 jjtree.openNodeScope(jjtn007);
          try {
jjtree.closeNodeScope(jjtn007, true);
                                 jjtc007 = false;
jjtn007.val = t.image;
          } finally {
if (jjtc007) {
                                   jjtree.closeNodeScope(jjtn007, true);
                                 }
          }
          jj_consume_token(LPARENS);
          jj_consume_token(RPARENS);
          break;
          }
        default:
          jj_la1[28] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_3R_22()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3_3()
 {
    if (jj_scan_token(TYPE_INT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_17()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_31()
 {
    if (jj_scan_token(AND)) return true;
    return false;
  }

  static private boolean jj_3R_30()
 {
    if (jj_3R_32()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_33()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_2()
 {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3R_28()
 {
    if (jj_3R_30()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_31()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_24()
 {
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3_1()
 {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3R_21()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_20()
 {
    if (jj_scan_token(TYPE_INT)) return true;
    return false;
  }

  static private boolean jj_3_6()
 {
    if (jj_scan_token(NEW)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) return true;
    }
    return false;
  }

  static private boolean jj_3R_50()
 {
    if (jj_scan_token(LPARENS)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_49()
 {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  static private boolean jj_3R_48()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_19()
 {
    if (jj_3R_24()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3R_47()
 {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  static private boolean jj_3R_46()
 {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  static private boolean jj_3R_29()
 {
    if (jj_scan_token(LSQPARENS)) return true;
    return false;
  }

  static private boolean jj_3R_27()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_29()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_45()
 {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3R_43()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3_6()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_52()
 {
    if (jj_3R_53()) return true;
    return false;
  }

  static private boolean jj_3R_23()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  static private boolean jj_3R_17()
 {
    if (jj_scan_token(LSQPARENS)) return true;
    return false;
  }

  static private boolean jj_3R_53()
 {
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  static private boolean jj_3R_51()
 {
    if (jj_scan_token(LSQPARENS)) return true;
    return false;
  }

  static private boolean jj_3R_44()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) return true;
    }
    return false;
  }

  static private boolean jj_3R_18()
 {
    if (jj_3R_23()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  static private boolean jj_3R_40()
 {
    if (jj_3R_43()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_44()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_42()
 {
    if (jj_scan_token(DIVIDES)) return true;
    return false;
  }

  static private boolean jj_3R_36()
 {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(26)) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_40()) return true;
    return false;
  }

  static private boolean jj_3R_37()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) return true;
    }
    return false;
  }

  static private boolean jj_3R_41()
 {
    if (jj_scan_token(TIMES)) return true;
    return false;
  }

  static private boolean jj_3_5()
 {
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3_4()
 {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3R_39()
 {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  static private boolean jj_3R_34()
 {
    if (jj_3R_36()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_37()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_35()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) return true;
    }
    return false;
  }

  static private boolean jj_3R_38()
 {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  static private boolean jj_3R_16()
 {
    if (jj_3R_22()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_26()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_33()
 {
    if (jj_scan_token(LESSTHAN)) return true;
    return false;
  }

  static private boolean jj_3R_25()
 {
    if (jj_scan_token(TYPE_BOOLEAN)) return true;
    return false;
  }

  static private boolean jj_3R_32()
 {
    if (jj_3R_34()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_35()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[30];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x800,0x1000,0x400,0x14f50000,0x14f50000,0x14f00000,0x2000000,0x0,0x40000000,0x0,0x0,0x50000,0x14f50000,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x4000000,0x41000000,0x41000000,0x2000000,0x14f00000,0x80000,0x14f00000,0x0,0x10e00000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x8030,0x0,0x8030,0x0,0xa001,0xa001,0xa000,0x0,0x8030,0x0,0x8010,0x1,0x0,0xa001,0x0,0x80,0x40,0x300,0x300,0xc00,0xc00,0x0,0x0,0x0,0x0,0xa000,0x8000,0xa000,0x8020,0xa000,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[6];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[50];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 30; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 50; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 6; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
