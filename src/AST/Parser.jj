/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Parser.jj */
/*@egen*//*
 * Parser.jjt
 *
 * A Java-- (MiniJava) parser.
 */

options {
	LOOKAHEAD=1;
	           
	                                
}

PARSER_BEGIN(Parser)
package AST;

import AST.SimpleNode;

public class Parser/*@bgen(jjtree)*/implements ParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTParserState jjtree = new JJTParserState();

/*@egen*/
	public Parser() {
	}

	private static void error_skipto(int kind) {
		// Generate the exception object
		ParseException e = generateParseException(); 
		// Print the error message
		System.out.println(e.toString()); 
		
		Token t;
		do {
			t = getNextToken();
		} while (t.kind != kind);
			// The above loop consumes tokens all the way up to a token of
			// "kind".  We use a do-while loop rather than a while because the
			// current token is the one immediately before the erroneous token
			// (in our case the token immediately before what should have been "while").
	}
}

PARSER_END(Parser)

/* 
 * Lexer token definitions
 */

/* Whitespace characters */
SKIP :
{
	" " | "\t" | "\n" | "\r" | "\f"
}

/* Comments */
SPECIAL_TOKEN : 
{
	< SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n") > |
	< MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/" > |
	< DOCS_COMMENT: "/**" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/" > 
}

/* General reserved keywords and characters */
TOKEN :
{
	< CLASS : "class" > |
	< EXTENDS : "extends" > |
	< PUBLIC : "public" > |
	< STATIC : "static" > |
	< VOID : "void" > |
	< MAIN : "main" > |
	< RETURN : "return" > |
	< IF : "if" > |
	< ELSE : "else" > |
	< WHILE : "while" > |
	< LENGTH : "length" > |
	< NEW : "new" > | 
	< TRUE : "true" > | 
	< FALSE : "false" > | 
	< THIS : "this" > | 
	< DOT : "." > |
	< COMMA: "," > |
	< NOT : "!" > |
	< SEMICOLON: ";" > |
	< LPARENS : "(" > |
	< RPARENS : ")" > |
	< LSQPARENS : "[" > |
	< RSQPARENS : "]" >  |
	< LBRACKET : "{" > |
	< RBRACKET : "}" > |
	< ASSIGN : "=" > 
}

/* Types */
TOKEN : {
	< TYPE_STRING : "String" > |
	< TYPE_BOOLEAN : "boolean" > | 
	< TYPE_INT : "int" >
}

/* Operators */
TOKEN : {
	< LESSTHAN : "<" > |
	< AND : "&&" > |
	< PLUS : "+" > |
	< MINUS : "-" > |
	< TIMES : "*" > |
	< DIVIDES : "/" > |
	< ARITHMETIC_OPERATOR : <PLUS> | <MINUS> | <TIMES> | <DIVIDES> >
}

/* Literals */
TOKEN : {
	< INTEGER_LITERAL : ["1"-"9"] (<DIGIT>)* | "0" > |
	< BOOLEAN_LITERAL : "true" | "false" >
}

/* Identifiers */
TOKEN :
{
	< IDENTIFIER : <LETTER> (<LETTER> | <DIGIT>)* > |
	< #DIGIT : [ "0"-"9" ] > | 
	< #LETTER: [ "a"-"z", "A"-"Z", "_" ] >
}

/*
 * Grammar definition
 */

SimpleNode Program()        : {/*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
        try {
/*@egen*/
	ClassDecl() <EOF>/*@bgen(jjtree)*/
                          {
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                          }
/*@egen*/ { return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ClassDecl()        : {/*@bgen(jjtree) Class */
                           ASTClass jjtn000 = new ASTClass(JJTCLASS);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;} 
{/*@bgen(jjtree) Class */
        try {
/*@egen*/
	<CLASS> t=<IDENTIFIER>/*@bgen(jjtree) Name */
                               {
                                 ASTName jjtn001 = new ASTName(JJTNAME);
                                 boolean jjtc001 = true;
                                 jjtree.openNodeScope(jjtn001);
                               }
                               try {
/*@egen*//*@bgen(jjtree)*/
                               {
                                 jjtree.closeNodeScope(jjtn001, true);
                                 jjtc001 = false;
                               }
/*@egen*/ {jjtn001.val = t.image;}/*@bgen(jjtree)*/
                               } finally {
                                 if (jjtc001) {
                                   jjtree.closeNodeScope(jjtn001, true);
                                 }
                               }
/*@egen*/       ClassExtends()
	<LBRACKET>
		(VarDecl())*
		(<PUBLIC> (MainDecl() | MethodDecl()))*
	<RBRACKET>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ClassExtends()       : {Token t;}
{
	(
		<EXTENDS> t=<IDENTIFIER>/*@bgen(jjtree) Extends */
                                         {
                                           ASTExtends jjtn001 = new ASTExtends(JJTEXTENDS);
                                           boolean jjtc001 = true;
                                           jjtree.openNodeScope(jjtn001);
                                         }
                                         try {
/*@egen*//*@bgen(jjtree)*/
                                         {
                                           jjtree.closeNodeScope(jjtn001, true);
                                           jjtc001 = false;
                                         }
/*@egen*/ {jjtn001.val = t.image;}/*@bgen(jjtree)*/
                                         } finally {
                                           if (jjtc001) {
                                             jjtree.closeNodeScope(jjtn001, true);
                                           }
                                         }
/*@egen*/         
	)?
}

void MainDecl()       : {/*@bgen(jjtree) Main */
  ASTMain jjtn000 = new ASTMain(JJTMAIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Main */
        try {
/*@egen*/
	<STATIC> <VOID> <MAIN>
	<LPARENS> <TYPE_STRING> <LSQPARENS> <RSQPARENS> <IDENTIFIER> <RPARENS> <LBRACKET>
		(LOOKAHEAD(2) VarDecl())*
		(Stmt())*
	<RBRACKET>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void MethodDecl()         : {/*@bgen(jjtree) Method */
                             ASTMethod jjtn000 = new ASTMethod(JJTMETHOD);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Method */
        try {
/*@egen*//*@bgen(jjtree) Return */
        {
          ASTReturn jjtn001 = new ASTReturn(JJTRETURN);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
	Type()/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
        }
/*@egen*/         t=<IDENTIFIER>/*@bgen(jjtree) Name */
                                      {
                                        ASTName jjtn002 = new ASTName(JJTNAME);
                                        boolean jjtc002 = true;
                                        jjtree.openNodeScope(jjtn002);
                                      }
                                      try {
/*@egen*//*@bgen(jjtree)*/
                                      {
                                        jjtree.closeNodeScope(jjtn002, true);
                                        jjtc002 = false;
                                      }
/*@egen*/ {jjtn002.val = t.image;}/*@bgen(jjtree)*/
                                      } finally {
                                        if (jjtc002) {
                                          jjtree.closeNodeScope(jjtn002, true);
                                        }
                                      }
/*@egen*/      
	<LPARENS> MethodParams() <RPARENS>
	<LBRACKET>
		(LOOKAHEAD(2) VarDecl())*
		(Stmt())*
		<RETURN> (Expr())? <SEMICOLON>
	<RBRACKET>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void MethodParams() : {/*@bgen(jjtree) MethodParams */
  ASTMethodParams jjtn000 = new ASTMethodParams(JJTMETHODPARAMS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MethodParams */
        try {
/*@egen*/
	(MethodParam() (<COMMA> MethodParam())*)?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void MethodParam() : {/*@bgen(jjtree) MethodParam */
                      ASTMethodParam jjtn000 = new ASTMethodParam(JJTMETHODPARAM);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) MethodParam */
        try {
/*@egen*/
	Type() t=<IDENTIFIER>/*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                              }
/*@egen*/ {jjtn000.val = t.image;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void Type() : {/*@bgen(jjtree) Type */
               ASTType jjtn000 = new ASTType(JJTTYPE);
               boolean jjtc000 = true;
               jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;} 
{/*@bgen(jjtree) Type */
        try {
/*@egen*/
	LOOKAHEAD(2)
	t=<TYPE_INT> {jjtn000.val = t.image;} (<LSQPARENS> <RSQPARENS> {jjtn000.val += "[]";})?
	|
	t=<TYPE_BOOLEAN>/*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                         }
/*@egen*/ {jjtn000.val = t.image;}
	|
	t=<IDENTIFIER>/*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                       }
/*@egen*/ {jjtn000.val = t.image;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void VarDecl()           : {/*@bgen(jjtree) Variable */
                            ASTVariable jjtn000 = new ASTVariable(JJTVARIABLE);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Variable */
        try {
/*@egen*/
	Type() t=<IDENTIFIER> {jjtn000.val = t.image;} <SEMICOLON>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Stmt()       : {}
{
	Block()
	|
	LOOKAHEAD(2)
	AssignStmt()
	|
	LOOKAHEAD(2)
	ExprStmt()
	|
	IfStmt()
	|
	WhileStmt()
}

void Block()       : {}
{
	<LBRACKET> (Stmt())* <RBRACKET>
}

void AssignStmt()         : {/*@bgen(jjtree) Assign */
                             ASTAssign jjtn000 = new ASTAssign(JJTASSIGN);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Assign */
        try {
/*@egen*/
	Lhs() <ASSIGN> Rhs() <SEMICOLON>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Lhs() : {/*@bgen(jjtree) Lhs */
              ASTLhs jjtn000 = new ASTLhs(JJTLHS);
              boolean jjtc000 = true;
              jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Lhs */
        try {
/*@egen*/
	t=<IDENTIFIER> {jjtn000.val = t.image;} ArrayAcc()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Rhs() : {/*@bgen(jjtree) Rhs */
              ASTRhs jjtn000 = new ASTRhs(JJTRHS);
              boolean jjtc000 = true;
              jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Rhs */
        try {
/*@egen*/
	Expr()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ArrayAcc()       : {}
{
	(<LSQPARENS> Expr() <RSQPARENS>)?
} 

void ExprStmt()       : {}
{
	Expr() <SEMICOLON>
}

void IfStmt()     : {/*@bgen(jjtree) If */
  ASTIf jjtn000 = new ASTIf(JJTIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) If */
        try {
/*@egen*/
	<IF> <LPARENS>/*@bgen(jjtree) IfCondition */
                       {
                         ASTIfCondition jjtn001 = new ASTIfCondition(JJTIFCONDITION);
                         boolean jjtc001 = true;
                         jjtree.openNodeScope(jjtn001);
                       }
                       try {
/*@egen*/ Expr()/*@bgen(jjtree)*/
                       } catch (Throwable jjte001) {
                         if (jjtc001) {
                           jjtree.clearNodeScope(jjtn001);
                           jjtc001 = false;
                         } else {
                           jjtree.popNode();
                         }
                         if (jjte001 instanceof RuntimeException) {
                           throw (RuntimeException)jjte001;
                         }
                         if (jjte001 instanceof ParseException) {
                           throw (ParseException)jjte001;
                         }
                         throw (Error)jjte001;
                       } finally {
                         if (jjtc001) {
                           jjtree.closeNodeScope(jjtn001, true);
                         }
                       }
/*@egen*/              <RPARENS> Stmt() <ELSE>/*@bgen(jjtree) Else */
                                                                   {
                                                                     ASTElse jjtn002 = new ASTElse(JJTELSE);
                                                                     boolean jjtc002 = true;
                                                                     jjtree.openNodeScope(jjtn002);
                                                                   }
                                                                   try {
/*@egen*/ Stmt()/*@bgen(jjtree)*/
                                                                   } catch (Throwable jjte002) {
                                                                     if (jjtc002) {
                                                                       jjtree.clearNodeScope(jjtn002);
                                                                       jjtc002 = false;
                                                                     } else {
                                                                       jjtree.popNode();
                                                                     }
                                                                     if (jjte002 instanceof RuntimeException) {
                                                                       throw (RuntimeException)jjte002;
                                                                     }
                                                                     if (jjte002 instanceof ParseException) {
                                                                       throw (ParseException)jjte002;
                                                                     }
                                                                     throw (Error)jjte002;
                                                                   } finally {
                                                                     if (jjtc002) {
                                                                       jjtree.closeNodeScope(jjtn002, true);
                                                                     }
                                                                   }
/*@egen*/      /*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void WhileStmt()        : {/*@bgen(jjtree) While */
  ASTWhile jjtn000 = new ASTWhile(JJTWHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) While */
        try {
/*@egen*/
	<WHILE> <LPARENS>
	try {/*@bgen(jjtree) WhileCondition */
                {
                  ASTWhileCondition jjtn001 = new ASTWhileCondition(JJTWHILECONDITION);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                }
                try {
/*@egen*/
		Expr()/*@bgen(jjtree)*/
                } catch (Throwable jjte001) {
                  if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    throw (RuntimeException)jjte001;
                  }
                  if (jjte001 instanceof ParseException) {
                    throw (ParseException)jjte001;
                  }
                  throw (Error)jjte001;
                } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, true);
                  }
                }
/*@egen*/                 
	} catch (ParseException e) {
		error_skipto(LBRACKET);
	}
	<RPARENS> Stmt()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Expr()       : {}
{
	ExprAnd()
}

void ExprAnd()       : {}
{
	ExprRelation()
	(
		<AND>/*@bgen(jjtree) #And( 2) */
                      {
                        ASTAnd jjtn001 = new ASTAnd(JJTAND);
                        boolean jjtc001 = true;
                        jjtree.openNodeScope(jjtn001);
                      }
                      try {
/*@egen*/ ExprRelation()/*@bgen(jjtree)*/
                      } catch (Throwable jjte001) {
                        if (jjtc001) {
                          jjtree.clearNodeScope(jjtn001);
                          jjtc001 = false;
                        } else {
                          jjtree.popNode();
                        }
                        if (jjte001 instanceof RuntimeException) {
                          throw (RuntimeException)jjte001;
                        }
                        if (jjte001 instanceof ParseException) {
                          throw (ParseException)jjte001;
                        }
                        throw (Error)jjte001;
                      } finally {
                        if (jjtc001) {
                          jjtree.closeNodeScope(jjtn001,  2);
                        }
                      }
/*@egen*/        
	)*
}

void ExprRelation()       : {Token t;}
{
	ExprAddSub() 
	(
		<LESSTHAN>/*@bgen(jjtree) #LessThan( 2) */
                           {
                             ASTLessThan jjtn001 = new ASTLessThan(JJTLESSTHAN);
                             boolean jjtc001 = true;
                             jjtree.openNodeScope(jjtn001);
                           }
                           try {
/*@egen*/ ExprAddSub()/*@bgen(jjtree)*/
                           } catch (Throwable jjte001) {
                             if (jjtc001) {
                               jjtree.clearNodeScope(jjtn001);
                               jjtc001 = false;
                             } else {
                               jjtree.popNode();
                             }
                             if (jjte001 instanceof RuntimeException) {
                               throw (RuntimeException)jjte001;
                             }
                             if (jjte001 instanceof ParseException) {
                               throw (ParseException)jjte001;
                             }
                             throw (Error)jjte001;
                           } finally {
                             if (jjtc001) {
                               jjtree.closeNodeScope(jjtn001,  2);
                             }
                           }
/*@egen*/             
	)*
}

void ExprAddSub()       : {}
{
	ExprMulDiv() 
	(
		<PLUS>/*@bgen(jjtree) #Add( 2) */
                       {
                         ASTAdd jjtn001 = new ASTAdd(JJTADD);
                         boolean jjtc001 = true;
                         jjtree.openNodeScope(jjtn001);
                       }
                       try {
/*@egen*/ ExprMulDiv()/*@bgen(jjtree)*/
                       } catch (Throwable jjte001) {
                         if (jjtc001) {
                           jjtree.clearNodeScope(jjtn001);
                           jjtc001 = false;
                         } else {
                           jjtree.popNode();
                         }
                         if (jjte001 instanceof RuntimeException) {
                           throw (RuntimeException)jjte001;
                         }
                         if (jjte001 instanceof ParseException) {
                           throw (ParseException)jjte001;
                         }
                         throw (Error)jjte001;
                       } finally {
                         if (jjtc001) {
                           jjtree.closeNodeScope(jjtn001,  2);
                         }
                       }
/*@egen*/        
		|
		<MINUS>/*@bgen(jjtree) #Sub( 2) */
                        {
                          ASTSub jjtn002 = new ASTSub(JJTSUB);
                          boolean jjtc002 = true;
                          jjtree.openNodeScope(jjtn002);
                        }
                        try {
/*@egen*/ ExprMulDiv()/*@bgen(jjtree)*/
                        } catch (Throwable jjte002) {
                          if (jjtc002) {
                            jjtree.clearNodeScope(jjtn002);
                            jjtc002 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte002 instanceof RuntimeException) {
                            throw (RuntimeException)jjte002;
                          }
                          if (jjte002 instanceof ParseException) {
                            throw (ParseException)jjte002;
                          }
                          throw (Error)jjte002;
                        } finally {
                          if (jjtc002) {
                            jjtree.closeNodeScope(jjtn002,  2);
                          }
                        }
/*@egen*/        
	)*
}

void ExprMulDiv()       : {}
{
	ExprUnary()
	(
		<TIMES>/*@bgen(jjtree) #Mul( 2) */
                        {
                          ASTMul jjtn001 = new ASTMul(JJTMUL);
                          boolean jjtc001 = true;
                          jjtree.openNodeScope(jjtn001);
                        }
                        try {
/*@egen*/ ExprUnary()/*@bgen(jjtree)*/
                        } catch (Throwable jjte001) {
                          if (jjtc001) {
                            jjtree.clearNodeScope(jjtn001);
                            jjtc001 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte001 instanceof RuntimeException) {
                            throw (RuntimeException)jjte001;
                          }
                          if (jjte001 instanceof ParseException) {
                            throw (ParseException)jjte001;
                          }
                          throw (Error)jjte001;
                        } finally {
                          if (jjtc001) {
                            jjtree.closeNodeScope(jjtn001,  2);
                          }
                        }
/*@egen*/        
		|
		<DIVIDES>/*@bgen(jjtree) #Div( 2) */
                          {
                            ASTDiv jjtn002 = new ASTDiv(JJTDIV);
                            boolean jjtc002 = true;
                            jjtree.openNodeScope(jjtn002);
                          }
                          try {
/*@egen*/ ExprUnary()/*@bgen(jjtree)*/
                          } catch (Throwable jjte002) {
                            if (jjtc002) {
                              jjtree.clearNodeScope(jjtn002);
                              jjtc002 = false;
                            } else {
                              jjtree.popNode();
                            }
                            if (jjte002 instanceof RuntimeException) {
                              throw (RuntimeException)jjte002;
                            }
                            if (jjte002 instanceof ParseException) {
                              throw (ParseException)jjte002;
                            }
                            throw (Error)jjte002;
                          } finally {
                            if (jjtc002) {
                              jjtree.closeNodeScope(jjtn002,  2);
                            }
                          }
/*@egen*/        
	)*
}

void ExprUnary()       : {}
{
	(<NOT>)*
	ExprSuffix()
}

void ExprSuffix()                  : {/*@bgen(jjtree) #ExprSuffix(> 1) */
                                      ASTExprSuffix jjtn000 = new ASTExprSuffix(JJTEXPRSUFFIX);
                                      boolean jjtc000 = true;
                                      jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) #ExprSuffix(> 1) */
        try {
/*@egen*/
	ExprPrefix()
	(
		<LSQPARENS> Expr() <RSQPARENS>
		|
		jjtn000.val=MethodCall()
		{jjtn000.kind = "MethodCall";}
	)*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
          }
        }
/*@egen*/
}

String MethodCall()       : {String token_img; Token t;}
{
	<DOT> 
	(
	t=<LENGTH> {token_img =t.image;}
	|
	t=<IDENTIFIER> {token_img = t.image;} 
	<LPARENS> MethodCallArgs() <RPARENS>
	)
	{return token_img;}
}

void MethodCallArgs() : {/*@bgen(jjtree) MethodCallArgs */
  ASTMethodCallArgs jjtn000 = new ASTMethodCallArgs(JJTMETHODCALLARGS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) MethodCallArgs */
        try {
/*@egen*/
	(Expr() (<COMMA> Expr())* )?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ExprPrefix()       : {Token t;}
{
	t=<INTEGER_LITERAL>/*@bgen(jjtree) Integer */
                            {
                              ASTInteger jjtn001 = new ASTInteger(JJTINTEGER);
                              boolean jjtc001 = true;
                              jjtree.openNodeScope(jjtn001);
                            }
                            try {
/*@egen*//*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn001, true);
                              jjtc001 = false;
                            }
/*@egen*/ {jjtn001.val = t.image;}/*@bgen(jjtree)*/
                            } finally {
                              if (jjtc001) {
                                jjtree.closeNodeScope(jjtn001, true);
                              }
                            }
/*@egen*/         
	|
	t=<TRUE>/*@bgen(jjtree) True */
                 {
                   ASTTrue jjtn002 = new ASTTrue(JJTTRUE);
                   boolean jjtc002 = true;
                   jjtree.openNodeScope(jjtn002);
                 }
                 try {
/*@egen*//*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn002, true);
                   jjtc002 = false;
                 }
/*@egen*/ {jjtn002.val = t.image;}/*@bgen(jjtree)*/
                 } finally {
                   if (jjtc002) {
                     jjtree.closeNodeScope(jjtn002, true);
                   }
                 }
/*@egen*/      
	| 
	t=<FALSE>/*@bgen(jjtree) False */
                  {
                    ASTFalse jjtn003 = new ASTFalse(JJTFALSE);
                    boolean jjtc003 = true;
                    jjtree.openNodeScope(jjtn003);
                  }
                  try {
/*@egen*//*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn003, true);
                    jjtc003 = false;
                  }
/*@egen*/ {jjtn003.val = t.image;}/*@bgen(jjtree)*/
                  } finally {
                    if (jjtc003) {
                      jjtree.closeNodeScope(jjtn003, true);
                    }
                  }
/*@egen*/       
	| 
	t=<IDENTIFIER>/*@bgen(jjtree) Id */
                       {
                         ASTId jjtn004 = new ASTId(JJTID);
                         boolean jjtc004 = true;
                         jjtree.openNodeScope(jjtn004);
                       }
                       try {
/*@egen*//*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn004, true);
                         jjtc004 = false;
                       }
/*@egen*/ {jjtn004.val = t.image;}/*@bgen(jjtree)*/
                       } finally {
                         if (jjtc004) {
                           jjtree.closeNodeScope(jjtn004, true);
                         }
                       }
/*@egen*/    
	| 
	t=<THIS>/*@bgen(jjtree) This */
                 {
                   ASTThis jjtn005 = new ASTThis(JJTTHIS);
                   boolean jjtc005 = true;
                   jjtree.openNodeScope(jjtn005);
                 }
                 try {
/*@egen*//*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn005, true);
                   jjtc005 = false;
                 }
/*@egen*/ {jjtn005.val = t.image;}/*@bgen(jjtree)*/
                 } finally {
                   if (jjtc005) {
                     jjtree.closeNodeScope(jjtn005, true);
                   }
                 }
/*@egen*/      
	|
	<LPARENS> Expr() <RPARENS> 
	|
	LOOKAHEAD(2)
	<NEW> (
		t=<TYPE_INT>/*@bgen(jjtree) New */
                             {
                               ASTNew jjtn006 = new ASTNew(JJTNEW);
                               boolean jjtc006 = true;
                               jjtree.openNodeScope(jjtn006);
                             }
                             try {
/*@egen*//*@bgen(jjtree)*/
                             {
                               jjtree.closeNodeScope(jjtn006, true);
                               jjtc006 = false;
                             }
/*@egen*/ {jjtn006.val = t.image + "[]";}/*@bgen(jjtree)*/
                             } finally {
                               if (jjtc006) {
                                 jjtree.closeNodeScope(jjtn006, true);
                               }
                             }
/*@egen*/      <LSQPARENS> (Expr())? <RSQPARENS> 
		|
		t=<IDENTIFIER>/*@bgen(jjtree) New */
                               {
                                 ASTNew jjtn007 = new ASTNew(JJTNEW);
                                 boolean jjtc007 = true;
                                 jjtree.openNodeScope(jjtn007);
                               }
                               try {
/*@egen*//*@bgen(jjtree)*/
                               {
                                 jjtree.closeNodeScope(jjtn007, true);
                                 jjtc007 = false;
                               }
/*@egen*/ {jjtn007.val = t.image;}/*@bgen(jjtree)*/
                               } finally {
                                 if (jjtc007) {
                                   jjtree.closeNodeScope(jjtn007, true);
                                 }
                               }
/*@egen*/      <LPARENS> <RPARENS>
	)
}